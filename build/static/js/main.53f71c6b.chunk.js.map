{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","link","i","cal","Math","round","calElm","color","className","style","recipe","text","map","element","key","container","href","src","alt","middle","linktext","App","useState","receipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","value","type","onChange","target","label","url","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kFACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,KAAO,qBAAqB,UAAY,0BAA0B,OAAS,uBAAuB,SAAW,yBAAyB,MAAQ,wB,6MCC/M,SAASC,EAAT,GAAgE,IAA9CC,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,SAAUC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,YAAaC,EAAQ,EAARA,KAChEC,EAAI,EACJC,EAAMC,KAAKC,MAAMP,GACjBQ,EAASH,EAAM,KAAO,CAAEI,MAAO,OAAU,CAAEA,MAAO,SACtD,OACE,yBAAKC,UAAWC,IAAMC,QACpB,wBAAIF,UAAWC,IAAMZ,OAAQA,GAC7B,wBAAIW,UAAWC,IAAME,MAClBX,EAAYY,KAAI,SAACC,GAEhB,OADAX,IACO,wBAAIY,IAAKZ,GAAIW,EAAQF,UAIhC,uBAAGF,MAAOH,GAASH,EAAnB,QACA,uBAAGK,UAAWC,IAAMM,UAAWC,KAAMf,GACnC,yBAAKO,UAAWC,IAAMV,MAAOkB,IAAKlB,EAAOmB,IAAKnB,IAC9C,yBAAKS,UAAWC,IAAMU,QACpB,yBAAKX,UAAWC,IAAMW,UAAtB,yB,MChBK,SAASC,IACtB,IAD4B,EAIGC,mBAAS,IAJZ,mBAIrBC,EAJqB,KAIXC,EAJW,OAKAF,mBAAS,IALT,mBAKrBG,EALqB,KAKbC,EALa,OAMFJ,mBAAS,WANP,mBAMrBK,EANqB,KAMdC,EANc,KAW5BC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OACSL,EADT,mBAff,WAee,oBAdd,qCAaG,cACXM,EADW,gBAIEA,EAASC,OAJX,OAIXC,EAJW,OAKjBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MANA,2CAAH,qDAchB,OACE,yBAAK5B,UAAU,OACb,yBAAKA,UAAU,UAAf,kBACA,0BAAMA,UAAU,cAAc+B,SARhB,SAACC,GACjBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,MAMN,2BACEgB,MAAOjB,EACPkB,KAAK,OACLnC,UAAU,aACVoC,SAAU,SAACJ,GAAD,OAAOd,EAAUc,EAAEK,OAAOH,UAEtC,4BAAQC,KAAK,SAASnC,UAAU,iBAAhC,WAIF,yBAAKA,UAAU,WACZe,EAASX,KAAI,SAACF,GAAD,OACZ,kBAACd,EAAD,CACEkB,IAAKJ,EAAOA,OAAOoC,MACnBjD,MAAOa,EAAOA,OAAOoC,MACrBhD,SAAUY,EAAOA,OAAOZ,SACxBC,MAAOW,EAAOA,OAAOX,MACrBC,YAAaU,EAAOA,OAAOV,YAC3BC,KAAMS,EAAOA,OAAOqC,WC3CZC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.53f71c6b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\",\"image\":\"recipe_image__BtdIE\",\"text\":\"recipe_text__1bcJv\",\"container\":\"recipe_container__X6Az9\",\"middle\":\"recipe_middle__2Sf42\",\"linktext\":\"recipe_linktext___lIc5\",\"title\":\"recipe_title__1jR5P\"};","import React from \"react\";\nimport style from \"./recipe.module.css\";\nexport default function Recipe({ title, calories, image, ingredients, link }) {\n  let i = 0;\n  let cal = Math.round(calories);\n  let calElm = cal > 2500 ? { color: \"red\" } : { color: \"green\" };\n  return (\n    <div className={style.recipe}>\n      <h1 className={style.title}>{title}</h1>\n      <ol className={style.text}>\n        {ingredients.map((element) => {\n          i++;\n          return <li key={i}>{element.text}</li>;\n        })}\n      </ol>\n      {}\n      <p style={calElm}>{cal} cal</p>\n      <a className={style.container} href={link}>\n        <img className={style.image} src={image} alt={image}></img>\n        <div className={style.middle}>\n          <div className={style.linktext}>Link to the recipe</div>\n        </div>\n      </a>\n      {/* </div> */}\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport Recipe from \"./Recipe\";\nimport \"./App.css\";\n\nexport default function App() {\n  const APP_ID = \"4495d815\";\n  const APP_KEY = \"3f99c7fac45b427ea4da258c62309750\";\n\n  const [receipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"chicken\");\n\n  // onSubmit = (search) => {\n  //   getRecipes(search);\n  // };\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n    );\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  };\n\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  };\n  return (\n    <div className=\"App\">\n      <div className=\"header\">Edgar's yumyum</div>\n      <form className=\"search-form\" onSubmit={getSearch}>\n        <input\n          value={search}\n          type=\"text\"\n          className=\"search-bar\"\n          onChange={(e) => setSearch(e.target.value)}\n        />\n        <button type=\"submit\" className=\"search-button\">\n          Search\n        </button>\n      </form>\n      <div className=\"recipes\">\n        {receipes.map((recipe) => (\n          <Recipe\n            key={recipe.recipe.label}\n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n            link={recipe.recipe.url}\n          ></Recipe>\n        ))}\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}